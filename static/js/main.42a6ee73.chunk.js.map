{"version":3,"sources":["AddTicket.tsx","List.tsx","AuthedApp.tsx","Login.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddTicket","onAdd","useState","title","setTitle","number","setNumber","content","setContent","validated","setValidated","step","setStep","Form","noValidate","onSubmit","event","preventDefault","length","Accordion","className","activeKey","onSelect","eventKey","undefined","Item","Header","id","Body","Control","type","value","onChange","target","required","min","val","parseInt","isNaN","as","Button","List","tickets","onDelete","ListGroup","map","ticket","onClick","variant","split","line","index","Fragment","TICKET_FILENAME","AuthedApp","user","view","setView","setTickets","msg","setMsg","octokit","useEffect","a","request","unfiltered_list","list","data","filter","gist","filenames","Object","keys","files","node_id_to_gist_id","Map","node_id","graphql","node_ids","nodes","flatMap","parsed","file","description","name","text","JSON","parse","err","get","fetchTickets","Alert","gist_id","Modal","show","onHide","size","closeButton","Title","stringify","public","response","Login","onLogin","username","setUsername","token","setToken","error","setError","currentTarget","checkValidity","Octokit","auth","login","headers","includes","status","message","Group","controlId","Label","App","key","initialState","storage","localStorage","useStateResult","item","getItem","setItem","removeItem","useStorage","credentials","setCredentials","Navbar","bg","expand","Container","Brand","Toggle","Collapse","Text","Nav","Link","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42a6ee73.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Accordion, Button, Form } from 'react-bootstrap';\nimport { Ticket } from './App';\n\ninterface AddTicketProps {\n    onAdd: (ticket: Omit<Ticket, 'id'>) => void;\n}\n\nconst AddTicket = ({ onAdd }: AddTicketProps) => {\n    const [title, setTitle] = useState('');\n    const [number, setNumber] = useState<number | null>(null);\n    const [content, setContent] = useState('');\n    const [validated, setValidated] = useState(false);\n\n    type Step = 'title' | 'number' | 'content' | undefined;\n    const [step, setStep] = useState<Step>('title');\n\n    return <Form noValidate validated={validated} onSubmit={event => {\n        event.preventDefault();\n        if (title.length === 0) {\n            setStep('title');\n            setValidated(true);\n        } else if (number === null || number < 1) {\n            setStep('number');\n            setValidated(true);\n        } else if (content.length === 0) {\n            setStep('content');\n            setValidated(true);\n        } else {\n            onAdd({ title, number, content });\n        }\n    }}>\n        <Accordion className=\"mb-3\" activeKey={step} onSelect={eventKey => setStep((eventKey ?? undefined) as Step)}>\n            <Accordion.Item eventKey=\"title\">\n                <Accordion.Header id=\"AddTicket-title-label\">Tytu≈Ç</Accordion.Header>\n                <Accordion.Body>\n                    <Form.Control\n                        type=\"text\"\n                        value={title}\n                        onChange={event => setTitle(event.target.value)}\n                        required\n                        aria-labelledby=\"AddTicket-title-label\"\n                    />\n                </Accordion.Body>\n            </Accordion.Item>\n            <Accordion.Item eventKey=\"number\">\n                <Accordion.Header id=\"AddTicket-number-label\">Numer</Accordion.Header>\n                <Accordion.Body>\n                    <Form.Control\n                        type=\"number\"\n                        value={number ?? ''}\n                        min={1}\n                        onChange={event => {\n                            const val = parseInt(event.target.value, 10);\n                            setNumber(isNaN(val) ? null : val);\n                        }}\n                        required\n                        aria-labelledby=\"AddTicket-number-label\"\n                    />\n                </Accordion.Body>\n            </Accordion.Item>\n            <Accordion.Item eventKey=\"content\">\n                <Accordion.Header id=\"AddTicket-content-label\">Tre≈õƒá</Accordion.Header>\n                <Accordion.Body>\n                    <Form.Control\n                        as=\"textarea\"\n                        className=\"AddTicket-content-textarea\"\n                        value={content}\n                        onChange={event => setContent(event.target.value)}\n                        required\n                        aria-labelledby=\"AddTicket-content-label\"\n                    />\n                </Accordion.Body>\n            </Accordion.Item>\n        </Accordion>\n        <div className=\"text-center\">\n            <Button type=\"submit\">Utw√≥rz</Button>\n        </div>\n    </Form>\n}\n\nexport default AddTicket;","import React from 'react';\nimport { Button, ListGroup } from 'react-bootstrap';\nimport { GoTrashcan } from \"react-icons/go\";\nimport { Ticket } from './App';\n\ninterface ListProps {\n    tickets: Ticket[];\n    onDelete: (id: string) => void;\n}\n\nconst List = ({ tickets, onDelete }: ListProps) => {\n    return <ListGroup>\n        {tickets.map(ticket => <ListGroup.Item key={ticket.id} className=\"List-item\">\n            <div className=\"List-item-header\">\n                <h3>{ticket.title} <span className=\"List-item-number\">#{ticket.number}</span></h3>\n                <Button onClick={() => onDelete(ticket.id)} variant=\"outline-dark\" aria-label=\"Usu≈Ñ\" className=\"List-item-delete\">\n                    <GoTrashcan />\n                </Button>\n            </div>\n            {ticket.content.split('\\n').map((line, index) => (\n                <React.Fragment key={index}>{line}<br /></React.Fragment>\n            ))}\n        </ListGroup.Item>)}\n    </ListGroup>;\n}\n\nexport default List;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport { Alert, Button, Modal } from 'react-bootstrap';\nimport AddTicket from './AddTicket';\nimport { User } from './App';\nimport './App.css';\nimport List from './List';\n\nexport interface Ticket {\n    title: string;\n    number: number;\n    content: string;\n    id: string;\n}\n\ninterface AuthedAppProps {\n    user: User;\n}\n\nconst TICKET_FILENAME = 'ticket.json';\n\nconst AuthedApp = ({ user }: AuthedAppProps) => {\n    const [view, setView] = useState<'list' | 'add'>('list');\n    const [tickets, setTickets] = useState<Ticket[]>([]);\n    const [msg, setMsg] = useState<'added' | 'deleted' | 'error' | null>(null);\n\n    const { octokit } = user;\n\n    useEffect(() => {\n        const fetchTickets = async () => {\n            // Use graphql to fetch all files in one request.\n            // Unfortunately right now the graphql API does not support deleting gists\n            // and the REST API needs gist_id rather than node_id.\n            // Use the REST API to obtain gist_id.\n            try {\n                const unfiltered_list = await octokit.request('GET /gists');\n\n                const list = unfiltered_list.data.filter(gist => {\n                    const filenames = Object.keys(gist.files);\n                    return filenames.length === 1 && filenames[0] === TICKET_FILENAME;\n                });\n\n                const node_id_to_gist_id = new Map(list.map(gist => [gist.node_id, gist.id]));\n\n                const { nodes } = await octokit.graphql(`\n                    query gists($node_ids: [ID!]!){\n                        nodes(ids: $node_ids) {\n                            ... on Gist {\n                                id\n                                description\n                                files (limit: 1) {\n                                    name\n                                    text\n                                }\n                            }\n                        }\n                    }\n                `, {\n                    node_ids: list.map(gist => gist.node_id)\n                });\n                setTickets(nodes.flatMap((gist: any) => {\n                    const file = gist?.files?.[0];\n                    if (typeof gist?.description !== 'string') return [];\n                    if (file?.name !== TICKET_FILENAME || typeof file?.text !== 'string') return [];\n                    let parsed;\n                    try {\n                        parsed = JSON.parse(file.text)\n                    } catch (err) {\n                        return [];\n                    }\n                    if (typeof parsed?.number !== 'number' || typeof parsed?.content !== 'string') return [];\n                    return [{\n                        title: gist.description,\n                        number: parsed.number,\n                        content: parsed.content,\n                        id: node_id_to_gist_id.get(gist.id),\n                    }];\n                }));\n            } catch (error) {\n                setMsg('error');\n            }\n        };\n        fetchTickets();\n    }, [octokit]);\n\n    return <div>\n        {msg === 'added' && <Alert variant=\"success\">Dodano ticket.</Alert>}\n        {msg === 'deleted' && <Alert variant=\"info\">Usuniƒôto ticket.</Alert>}\n        {msg === 'error' && <Alert variant=\"danger\">WystƒÖpi≈Ç b≈ÇƒÖd.</Alert>}\n        <div className=\"mb-3\">\n            <Button onClick={() => setView('add')}>Utw√≥rz</Button>\n        </div>\n        <List tickets={tickets} onDelete={async id => {\n            try {\n                await octokit.request('DELETE /gists/{gist_id}', {\n                    gist_id: id,\n                })\n                setTickets(tickets.filter(ticket => ticket.id !== id));\n                setMsg('deleted');\n            } catch (error) {\n                setMsg('error')\n            }\n        }} />\n        {/* Looks like there is a bug in Modal type definition\n            Probably Element instead of Element[] somewhere\n        // @ts-ignore */}\n        <Modal show={view === 'add'} onHide={() => setView('list')} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title>Utw√≥rz ticket</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <AddTicket onAdd={async ticket => {\n                    try {\n                        const response = await octokit.request('POST /gists', {\n                            description: ticket.title,\n                            files: {\n                                [TICKET_FILENAME]: { content: JSON.stringify({ number: ticket.number, content: ticket.content }) },\n                            },\n                            public: false,\n                        });\n                        setTickets([{ ...ticket, id: response.data.id! }, ...tickets])\n                        setView('list');\n                        setMsg('added');\n                    } catch (error) {\n                        setMsg('error')\n                    }\n                }} />\n            </Modal.Body>\n        </Modal>\n    </div>;\n}\n\nexport default AuthedApp;\n","import { Octokit } from '@octokit/core';\nimport { useState } from 'react';\nimport { Alert, Button, Form } from 'react-bootstrap';\n\ninterface LoginProps {\n    onLogin: (username: string, token: string) => void;\n}\n\nconst Login = ({ onLogin }: LoginProps) => {\n    const [username, setUsername] = useState('');\n    const [token, setToken] = useState('');\n    const [validated, setValidated] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    return <div className=\"Login\">\n        <Form noValidate validated={validated} onSubmit={async event => {\n            event.preventDefault();\n            if (!event.currentTarget.checkValidity()) {\n                setValidated(true);\n                return;\n            }\n            try {\n                const octokit = new Octokit({ auth: token });\n                const response = await octokit.request('GET /user');\n                setValidated(false);\n                if (username !== response.data.login) {\n                    setError('Nieprawid≈Çowe dane logowania.');\n                } else if (!response.headers['x-oauth-scopes']?.split(', ').includes('gist')) {\n                    setError('Token nie ma uprawnienia \"gist\".');\n                } else {\n                    onLogin(response.data.login, token);\n                }\n            } catch (error) {\n                setValidated(false);\n                if (error.status === 401) {\n                    setError('Nieprawid≈Çowe dane logowania.');\n                } else if (error.status === 500) {\n                    setError('Nieudane po≈ÇƒÖczenie z serwerem.');\n                } else {\n                    setError(`WystƒÖpi≈Ç b≈ÇƒÖd. (${error.status} ${error.message})`);\n                }\n            }\n        }}>\n            <Form.Group className=\"mb-3\" controlId=\"Login-username\">\n                <Form.Label>Nazwa u≈ºytkownika</Form.Label>\n                <Form.Control type=\"text\" value={username} onChange={event => setUsername(event.target.value)} required />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"Login-token\">\n                <Form.Label>Klucz API</Form.Label>\n                <Form.Control type=\"password\" value={token} onChange={event => setToken(event.target.value)} required />\n            </Form.Group>\n            {error !== null && <Alert variant=\"danger\">\n                {error}\n            </Alert>}\n            <div className=\"text-center\">\n                <Button variant=\"primary\" type=\"submit\">Zaloguj</Button>\n            </div>\n        </Form>\n    </div>;\n};\n\nexport default Login;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Octokit } from '@octokit/core';\nimport { useEffect, useState } from 'react';\nimport { Container, Nav, Navbar } from 'react-bootstrap';\nimport './App.css';\nimport AuthedApp from './AuthedApp';\nimport Login from './Login';\n\nexport interface Ticket {\n    title: string;\n    number: number;\n    content: string;\n    id: string;\n}\n\nexport interface User {\n    name: string;\n    octokit: Octokit;\n}\n\nexport interface Credentials {\n    name: string;\n    token: string;\n}\n\n/**\n * null removes the record\n */\nconst useStorage = <T,>(key: string, initialState: T | null, storage: Storage = localStorage) => {\n    const useStateResult = useState<T | null>(() => {\n        const item = storage.getItem(key);\n        if (item !== null) return JSON.parse(item);\n        return initialState;\n    });\n    const [value] = useStateResult;\n\n    useEffect(() => {\n        if (value !== null) {\n            storage.setItem(key, JSON.stringify(value));\n        } else {\n            storage.removeItem(key);\n        }\n    }, [key, value, storage]);\n\n    return useStateResult;\n}\n\nconst App = () => {\n    const [credentials, setCredentials] = useStorage<Credentials>('credentials', null);\n\n    return <div className=\"App-wrapper\">\n        <div className=\"App\">\n            <Navbar variant=\"light\" bg=\"light\" expand=\"sm\" className=\"mb-3\">\n                <Container>\n                    <Navbar.Brand>Tickety</Navbar.Brand>\n                    {credentials !== null && <>\n                        <Navbar.Toggle />\n                        <Navbar.Collapse className=\"justify-content-end\">\n                            <Navbar.Text>U≈ºytkownik: {credentials.name}</Navbar.Text>\n                            <Nav>\n                                <Nav.Link onClick={() => setCredentials(null)}>Wyloguj</Nav.Link>\n                            </Nav>\n                        </Navbar.Collapse>\n                    </>}\n                </Container>\n            </Navbar>\n            {credentials !== null\n                ? <AuthedApp user={{ name: credentials.name, octokit: new Octokit({ auth: credentials.token }) }} />\n                : <Login onLogin={(name, token) => {\n                    setCredentials({ name, token });\n                }} />\n            }\n        </div>\n    </div>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}